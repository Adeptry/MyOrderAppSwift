//
// CustomersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CustomersAPI {
    /**

     - parameter customerCreateInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCustomer(customerCreateInput: CustomerCreateInput, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ data: Customer?, _ error: Error?) -> Void)) {
        createCustomerWithRequestBuilder(customerCreateInput: customerCreateInput).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/customers
     - parameter customerCreateInput: (body)  
     - returns: RequestBuilder<Customer> 
     */
    open class func createCustomerWithRequestBuilder(customerCreateInput: CustomerCreateInput) -> RequestBuilder<Customer> {
        let path = "/v1/customers"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customerCreateInput)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Customer>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCurrentCustomer(apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ data: Customer?, _ error: Error?) -> Void)) {
        getCurrentCustomerWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/customers/current
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<Customer> 
     */
    open class func getCurrentCustomerWithRequestBuilder() -> RequestBuilder<Customer> {
        let path = "/v1/customers/current"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Customer>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter customerUpdateInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCustomer(customerUpdateInput: CustomerUpdateInput, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ data: Customer?, _ error: Error?) -> Void)) {
        updateCustomerWithRequestBuilder(customerUpdateInput: customerUpdateInput).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v1/customers/current
     - parameter customerUpdateInput: (body)  
     - returns: RequestBuilder<Customer> 
     */
    open class func updateCustomerWithRequestBuilder(customerUpdateInput: CustomerUpdateInput) -> RequestBuilder<Customer> {
        let path = "/v1/customers/current"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customerUpdateInput)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Customer>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
