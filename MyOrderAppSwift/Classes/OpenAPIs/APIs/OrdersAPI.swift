//
// OrdersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objc open class OrdersAPI : NSObject {
    /**

     - parameter moaOrderAddInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func addVariationToCurrentCustomersCurrentOrder(moaOrderAddInput: MoaOrderAddInput, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MoaOrder, Error>) -> Void)) {
        addVariationToCurrentCustomersCurrentOrderWithRequestBuilder(moaOrderAddInput: moaOrderAddInput).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - PUT /v1/customers/current/orders/current/variation
     - BASIC:
       - type: http
       - name: bearer
     - parameter moaOrderAddInput: (body)  
     - returns: RequestBuilder<MoaOrder> 
     */
    open class func addVariationToCurrentCustomersCurrentOrderWithRequestBuilder(moaOrderAddInput: MoaOrderAddInput) -> RequestBuilder<MoaOrder> {
        let path = "/v1/customers/current/orders/current/variation"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: moaOrderAddInput)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MoaOrder>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter moaOrderCreateInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func createOrderForCurrentCustomer(moaOrderCreateInput: MoaOrderCreateInput, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MoaCustomer, Error>) -> Void)) {
        createOrderForCurrentCustomerWithRequestBuilder(moaOrderCreateInput: moaOrderCreateInput).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /v1/customers/current/orders/current
     - BASIC:
       - type: http
       - name: bearer
     - parameter moaOrderCreateInput: (body)  
     - returns: RequestBuilder<MoaCustomer> 
     */
    open class func createOrderForCurrentCustomerWithRequestBuilder(moaOrderCreateInput: MoaOrderCreateInput) -> RequestBuilder<MoaCustomer> {
        let path = "/v1/customers/current/orders/current"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: moaOrderCreateInput)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MoaCustomer>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func deleteCurrentCustomersCurrentOrder(apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MoaCustomer, Error>) -> Void)) {
        deleteCurrentCustomersCurrentOrderWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /v1/customers/current/orders/current
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<MoaCustomer> 
     */
    open class func deleteCurrentCustomersCurrentOrderWithRequestBuilder() -> RequestBuilder<MoaCustomer> {
        let path = "/v1/customers/current/orders/current"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MoaCustomer>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getCurrentCustomerOrders(page: Double? = nil, limit: Double? = nil, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MoaOrderPaginatedResponse, Error>) -> Void)) {
        getCurrentCustomerOrdersWithRequestBuilder(page: page, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /v1/customers/current/orders
     - BASIC:
       - type: http
       - name: bearer
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - returns: RequestBuilder<MoaOrderPaginatedResponse> 
     */
    open class func getCurrentCustomerOrdersWithRequestBuilder(page: Double? = nil, limit: Double? = nil) -> RequestBuilder<MoaOrderPaginatedResponse> {
        let path = "/v1/customers/current/orders"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MoaOrderPaginatedResponse>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getCurrentCustomersCurrentOrder(apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MoaOrder, Error>) -> Void)) {
        getCurrentCustomersCurrentOrderWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /v1/customers/current/orders/current
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<MoaOrder> 
     */
    open class func getCurrentCustomersCurrentOrderWithRequestBuilder() -> RequestBuilder<MoaOrder> {
        let path = "/v1/customers/current/orders/current"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MoaOrder>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter moaId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getOrderWithId(moaId: String, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MoaOrder, Error>) -> Void)) {
        getOrderWithIdWithRequestBuilder(moaId: moaId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /v1/orders/{moaId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter moaId: (path)  
     - returns: RequestBuilder<MoaOrder> 
     */
    open class func getOrderWithIdWithRequestBuilder(moaId: String) -> RequestBuilder<MoaOrder> {
        var path = "/v1/orders/{moaId}"
        let moaIdPreEscape = "\(APIHelper.mapValueToPathItem(moaId))"
        let moaIdPostEscape = moaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moaId}", with: moaIdPostEscape, options: .literal, range: nil)
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MoaOrder>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter moaOrderPayInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func payForCurrentCustomersCurrentOrder(moaOrderPayInput: MoaOrderPayInput, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MoaOrder, Error>) -> Void)) {
        payForCurrentCustomersCurrentOrderWithRequestBuilder(moaOrderPayInput: moaOrderPayInput).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - PUT /v1/customers/current/orders/current/payment
     - BASIC:
       - type: http
       - name: bearer
     - parameter moaOrderPayInput: (body)  
     - returns: RequestBuilder<MoaOrder> 
     */
    open class func payForCurrentCustomersCurrentOrderWithRequestBuilder(moaOrderPayInput: MoaOrderPayInput) -> RequestBuilder<MoaOrder> {
        let path = "/v1/customers/current/orders/current/payment"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: moaOrderPayInput)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MoaOrder>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter orderVariationUid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func removeVariationFromCurrentCustomersCurrentOrder(orderVariationUid: String, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MoaOrder, Error>) -> Void)) {
        removeVariationFromCurrentCustomersCurrentOrderWithRequestBuilder(orderVariationUid: orderVariationUid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /v1/customers/current/orders/current/variation/{orderVariationUid}
     - BASIC:
       - type: http
       - name: bearer
     - parameter orderVariationUid: (path)  
     - returns: RequestBuilder<MoaOrder> 
     */
    open class func removeVariationFromCurrentCustomersCurrentOrderWithRequestBuilder(orderVariationUid: String) -> RequestBuilder<MoaOrder> {
        var path = "/v1/customers/current/orders/current/variation/{orderVariationUid}"
        let orderVariationUidPreEscape = "\(APIHelper.mapValueToPathItem(orderVariationUid))"
        let orderVariationUidPostEscape = orderVariationUidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orderVariationUid}", with: orderVariationUidPostEscape, options: .literal, range: nil)
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MoaOrder>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
