//
// CardsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objc open class CardsAPI : NSObject {
    /**

     - parameter squareCreateCustomerCardInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func createCardForCurrentCustomer(squareCreateCustomerCardInput: SquareCreateCustomerCardInput, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[SquareCard], Error>) -> Void)) {
        createCardForCurrentCustomerWithRequestBuilder(squareCreateCustomerCardInput: squareCreateCustomerCardInput).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /v1/customers/current/cards
     - BASIC:
       - type: http
       - name: bearer
     - parameter squareCreateCustomerCardInput: (body)  
     - returns: RequestBuilder<[SquareCard]> 
     */
    open class func createCardForCurrentCustomerWithRequestBuilder(squareCreateCustomerCardInput: SquareCreateCustomerCardInput) -> RequestBuilder<[SquareCard]> {
        let path = "/v1/customers/current/cards"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: squareCreateCustomerCardInput)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[SquareCard]>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter squareId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func deleteCardForCurrentCustomer(squareId: String, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[SquareCard], Error>) -> Void)) {
        deleteCardForCurrentCustomerWithRequestBuilder(squareId: squareId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /v1/customers/current/cards/{squareId}
     - BASIC:
       - type: http
       - name: bearer
     - parameter squareId: (path)  
     - returns: RequestBuilder<[SquareCard]> 
     */
    open class func deleteCardForCurrentCustomerWithRequestBuilder(squareId: String) -> RequestBuilder<[SquareCard]> {
        var path = "/v1/customers/current/cards/{squareId}"
        let squareIdPreEscape = "\(APIHelper.mapValueToPathItem(squareId))"
        let squareIdPostEscape = squareIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{squareId}", with: squareIdPostEscape, options: .literal, range: nil)
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[SquareCard]>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getCardsForCurrentCustomer(apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<[SquareCard], Error>) -> Void)) {
        getCardsForCurrentCustomerWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /v1/customers/current/cards
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<[SquareCard]> 
     */
    open class func getCardsForCurrentCustomerWithRequestBuilder() -> RequestBuilder<[SquareCard]> {
        let path = "/v1/customers/current/cards"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[SquareCard]>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
