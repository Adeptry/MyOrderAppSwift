//
// SquareAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objc open class SquareAPI : NSObject {
    /**

     - parameter squareCreateCustomerCardInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSquareCardForCurrentCustomer(squareCreateCustomerCardInput: SquareCreateCustomerCardInput, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ data: SquareCreateCustomerCardOutput?, _ error: Error?) -> Void)) {
        createSquareCardForCurrentCustomerWithRequestBuilder(squareCreateCustomerCardInput: squareCreateCustomerCardInput).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/square/cards
     - BASIC:
       - type: http
       - name: bearer
     - parameter squareCreateCustomerCardInput: (body)  
     - returns: RequestBuilder<SquareCreateCustomerCardOutput> 
     */
    open class func createSquareCardForCurrentCustomerWithRequestBuilder(squareCreateCustomerCardInput: SquareCreateCustomerCardInput) -> RequestBuilder<SquareCreateCustomerCardOutput> {
        let path = "/v1/square/cards"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: squareCreateCustomerCardInput)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SquareCreateCustomerCardOutput>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter squareDeleteCustomerCardInput: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSquareCardForCurrentCustomer(squareDeleteCustomerCardInput: SquareDeleteCustomerCardInput, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ data: [SquareError]?, _ error: Error?) -> Void)) {
        deleteSquareCardForCurrentCustomerWithRequestBuilder(squareDeleteCustomerCardInput: squareDeleteCustomerCardInput).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v1/square/cards
     - BASIC:
       - type: http
       - name: bearer
     - parameter squareDeleteCustomerCardInput: (body)  
     - returns: RequestBuilder<[SquareError]> 
     */
    open class func deleteSquareCardForCurrentCustomerWithRequestBuilder(squareDeleteCustomerCardInput: SquareDeleteCustomerCardInput) -> RequestBuilder<[SquareError]> {
        let path = "/v1/square/cards"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: squareDeleteCustomerCardInput)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[SquareError]>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSquareCardsForCurrentCustomer(apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ data: [SquareCard]?, _ error: Error?) -> Void)) {
        getSquareCardsForCurrentCustomerWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/square/cards
     - BASIC:
       - type: http
       - name: bearer
     - returns: RequestBuilder<[SquareCard]> 
     */
    open class func getSquareCardsForCurrentCustomerWithRequestBuilder() -> RequestBuilder<[SquareCard]> {
        let path = "/v1/square/cards"
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[SquareCard]>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
