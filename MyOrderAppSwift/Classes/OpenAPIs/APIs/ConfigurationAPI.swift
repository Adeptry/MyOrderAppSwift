//
// ConfigurationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

@objc open class ConfigurationAPI : NSObject {
    /**

     - parameter merchantMoaId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getConfiguration(merchantMoaId: String, apiResponseQueue: DispatchQueue = MyOrderAppSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<MoaConfigurationDto, Error>) -> Void)) {
        getConfigurationWithRequestBuilder(merchantMoaId: merchantMoaId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /v1/configuration/{merchantMoaId}
     - parameter merchantMoaId: (path)  
     - returns: RequestBuilder<MoaConfigurationDto> 
     */
    open class func getConfigurationWithRequestBuilder(merchantMoaId: String) -> RequestBuilder<MoaConfigurationDto> {
        var path = "/v1/configuration/{merchantMoaId}"
        let merchantMoaIdPreEscape = "\(APIHelper.mapValueToPathItem(merchantMoaId))"
        let merchantMoaIdPostEscape = merchantMoaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{merchantMoaId}", with: merchantMoaIdPostEscape, options: .literal, range: nil)
        let URLString = MyOrderAppSwiftAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MoaConfigurationDto>.Type = MyOrderAppSwiftAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
